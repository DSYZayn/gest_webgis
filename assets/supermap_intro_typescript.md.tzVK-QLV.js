import{_ as t,c as p,o as r,R as e,ab as i}from"./chunks/framework.FfYh61A3.js";const h=JSON.parse('{"title":"TypeScript简介","description":"","frontmatter":{},"headers":[],"relativePath":"supermap/intro/typescript.md","filePath":"supermap/intro/typescript.md","lastUpdated":1703783542000}'),a={name:"supermap/intro/typescript.md"},c=e('<h1 id="typescript简介" tabindex="-1">TypeScript简介 <a class="header-anchor" href="#typescript简介" aria-label="Permalink to &quot;TypeScript简介&quot;">​</a></h1><p><strong>实际上TS做的工作就是 JS + 类型检查 + 代码提示</strong></p><h2 id="什么是typescript" tabindex="-1">什么是TypeScript <a class="header-anchor" href="#什么是typescript" aria-label="Permalink to &quot;什么是TypeScript&quot;">​</a></h2><img src="'+i+'" class="float-left pr-5"><br><ul><li>TypeScript 是 JavaScript 的一个超集，支持 ECMAScript 6 标准（<a href="https://www.runoob.com/w3cnote/es6-tutorial.html" target="_blank" rel="noreferrer">ES6教程</a>）。</li><li>TypeScript 由微软开发的自由和开源的编程语言。</li><li>TypeScript 设计目标是开发大型应用，它可以编译成纯 JavaScript，编译出来的 JavaScript 可以运行在任何浏览器上。 <br><br></li></ul><h2 id="为什么要使用typescript" tabindex="-1">为什么要使用TypeScript <a class="header-anchor" href="#为什么要使用typescript" aria-label="Permalink to &quot;为什么要使用TypeScript&quot;">​</a></h2><p>使用TypeScript并不会提高软件性能，因为TypeScript最终会被编译成JavaScript，TypeScript的运行速度完全取决于JavaScript。<br> 但使用TypeScript可以提高开发效率，TypeScript可以减少bug，提高代码的可读性，可维护性，可维护性。<br> 这主要归功于TypeScript的类型系统,它允许开发者在开发阶段发现错误，并且其类型标注将由IDE捕获从而带来更多类型提示。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>面对大型项目，使用TypeScript可以大大减少稀奇古怪的bug，做到事出有因,快速排查。</p></div><h2 id="typescript的缺点" tabindex="-1">TypeScript的缺点 <a class="header-anchor" href="#typescript的缺点" aria-label="Permalink to &quot;TypeScript的缺点&quot;">​</a></h2><ol><li>学习成本高,对新手不友好，尤其是对于JS都写不好的新手</li><li>类型系统的引入，会导致代码量增加，你需要像开发第三方库一样去思考代码的编写</li><li>由于最终会被编译为JavaScript,所以会引入类型检查和编译器，如果你使用的某些库不支持TS，那将是一场类型灾难。</li></ol><div class="danger custom-block"><p class="custom-block-title">DANGER</p><ul><li>在某些必要的情况下，可以忽略Typescript对某些文件的类型检查，以免崩溃在build阶段.</li><li>在某些必要的情况下，可以为某些文件添加.d.ts文件，以提供类型定义。</li><li>在某些特殊的情况下，不建议使用TypeScript,例如你使用的开发包，大部分都不支持TS。</li></ul></div>',12),l=[c];function s(o,n,S,d,y,T){return r(),p("div",null,l)}const u=t(a,[["render",s]]);export{h as __pageData,u as default};
